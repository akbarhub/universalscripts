if game.PlaceId == 3101667897 then

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Legends Of Speed | AFBLOX HUB",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading script......",
   LoadingSubtitle = "By sisiterangindomie",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "Welcome Back",
      Subtitle = "Key System",
      Note = "Join discord for key", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"FreeScript"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab1 = Window:CreateTab("Main", 4483362458) -- Title, Image
local Section = Tab1:CreateSection("City Farm")


local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Blue Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoblue = v
   while true do 
if not getgenv().autoblue then return end
   local args = {
    [1] = "collectOrb",
    [2] = "Blue Orb",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
   wait() 
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Yellow Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoxp = v
   while true do
if not getgenv().autoxp then return end
local args = {
    [1] = "collectOrb",
    [2] = "Yellow Orb",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait() 
   end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Orange Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoop = v
   while true do
if not getgenv().autoop then return end
local args = {
    [1] = "collectOrb",
    [2] = "Orange Orb",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Red Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autored = v
   while true do
if not getgenv().autored then return end
local args = {
    [1] = "collectOrb",
    [2] = "Red Orb",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Section = Tab1:CreateSection("Snow Farm")

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Blue Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoblue = v
   while true do
if not getgenv().autoblue then return end
local args = {
    [1] = "collectOrb",
    [2] = "Blue Orb",
    [3] = "Snow City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Yellow Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoyellow = v
   while true do
if not getgenv().autoyellow then return end
local args = {
    [1] = "collectOrb",
    [2] = "Yellow Orb",
    [3] = "Snow City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Orange Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoorage = v
   while true do
if not getgenv().autoorage then return end
local args = {
    [1] = "collectOrb",
    [2] = "Orange Orb",
    [3] = "Snow City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Red Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autored = v
   while true do
if not getgenv().autored then return end
local args = {
    [1] = "collectOrb",
    [2] = "Red Orb",
    [3] = "Snow City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
   end
   end,
})
  
local Section = Tab1:CreateSection("Magma City Farm")

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Blue Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().hotso = v
   while true do
if not getgenv().hotso then return end
local args = {
    [1] = "collectOrb",
    [2] = "Blue Orb",
    [3] = "Magma City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait() 
end
   end,
})


local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Yellow Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().automanis = v
   while true do
if not getgenv().automanis then return end
local args = {
    [1] = "collectOrb",
    [2] = "Yellow Orb",
    [3] = "Magma City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Orange  Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autosea = v
    while true do
if not getgenv().autosea then return end
local args = {
    [1] = "collectOrb",
    [2] = "Orange Orb",
    [3] = "Magma City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Red Orb",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().automenang = v
   while true do
if not getgenv().automenang then return end
local args = {
    [1] = "collectOrb",
    [2] = "Red Orb",
    [3] = "Magma City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})




local Section = Tab1:CreateSection("Auto Claim Gift")

local Toggle = Tab1:CreateToggle({
   Name = "Auto ClaimGift",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autogift = v
   while true do
if not getgenv().autogift then return end
local args = { [1] = "claimGift", [2] = 1}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait()
local args = { [1] = "claimGift", [2] = 2}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait()
local args = { [1] = "claimGift", [2] = 3}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait()
local args = { [1] = "claimGift", [2] = 4}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args)) 
wait() 
local args = { [1] = "claimGift", [2] = 5}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait()
local args = { [1] = "claimGift", [2] = 6}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait() 
local args = { [1] = "claimGift", [2] = 7}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait()
local args = { [1] = "claimGift", [2] = 8}
game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("freeGiftClaimRemote"):InvokeServer(unpack(args))
wait() 
end
   end,
})

local Section = Tab1:CreateSection("Auto Rebirth")

local Toggle = Tab1:CreateToggle({
   Name = "Auto Rebirth",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autoagain = v
   while true do
if not getgenv().autoagain then return end
local args = {
    [1] = "rebirthRequest"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("rebirthEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Section = Tab1:CreateSection("Auto Roll Pet")

local Button = Tab1:CreateButton({
   Name = "Red Crystal(disable animation)",
   Callback = function()
   local args = {
    [1] = "openCrystal",
    [2] = "Red Crystal"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Blue Crystal(disable animation) ",
   Callback = function()
   local args = {
    [1] = "openCrystal",
    [2] = "Blue Crystal"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Purple crystal(disable animation) ",
   Callback = function()
   local args = {
    [1] = "openCrystal",
    [2] = "Purple Crystal"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Lightning Crystal(disable animation) ",
   Callback = function()
   local args = {
    [1] = "openCrystal",
    [2] = "Lightning Crystal"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("openCrystalRemote"):InvokeServer(unpack(args))
wait() 
   end,
})

local Section = Tab1:CreateSection("Auto Collect Gems")

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Gems (City Farm) ",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autogame = v
   while true do
if not getgenv().autogame then return end
local args = {
    [1] = "collectOrb",
    [2] = "Gem",
    [3] = "City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Gems (Snow Farm)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autovicto = v
   while true do
if not getgenv().autovicto then return end
   local args = {
    [1] = "collectOrb",
    [2] = "Gem",
    [3] = "Snow City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait()
end
   end,
})


local Toggle = Tab1:CreateToggle({
   Name = "Auto Collect Gems (magma city farm) ",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autogale = v
   while true do
if not getgenv().autogale then return end
local args = {
    [1] = "collectOrb",
    [2] = "Gem",
    [3] = "Magma City"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("orbEvent"):FireServer(unpack(args))
wait() 
end
   end,
})


local Section = Tab1:CreateSection("Race")

local Toggle = Tab1:CreateToggle({
   Name = "Auto Join Race",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(v)
   getgenv().autowons = v
   while true do
 if not getgenv().autowons then return end
 local args = {
    [1] = "joinRace"
}

game:GetService("ReplicatedStorage"):WaitForChild("rEvents"):WaitForChild("raceEvent"):FireServer(unpack(args))
wait()
end
   end,
})

local Button = Tab1:CreateButton({
   Name = "Auto Finish Race (only crassland) ",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1686.07495, 36.3147125, -5946.63428, -0.984812617, 0, 0.173621148, 0, 1, 0, -0.173621148, 0, -0.984812617)
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Auto Finish Race(only magma) ",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1001.33118, 36.3147125, -10986.2178, -0.996191859, 0, -0.0871884301, 0, 1, 0, 0.0871884301, 0, -0.996191859)
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Auto Finish Race(only Desert) ",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(48.3109131, 36.3147125, -8680.45312, -1, 0, 0, 0, 1, 0, 0, 0, -1)
wait()
   end,
})


local Section = Tab1:CreateSection("Teleport")

local Button = Tab1:CreateButton({
   Name = "Teleport Grass Course",
   Callback = function()
  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1549.26196, 25.0500736, -456.865784, 0.984812498, -0, -0.173621148, 0, 1, -0, 0.173621148, 0, 0.984812498)
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Teleport Cave",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-9621.94238, 76.9078827, 3739.92896, -0.819363475, 0, -0.573274553, 0, 1, 0, 0.573274553, 0, -0.819363475)
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Teleport Parkour Challenge",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(1474.52515, 25.0500736, -2058.6582, 0.173624337, 0, 0.984811902, 0, 1, 0, -0.984811902, 0, 0.173624337)
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Teleport Frost Course",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(2162.15112, 42.4048767, 1008.45801, 0.643055201, 0, 0.765819848, 0, 1, 0, -0.765819848, 0, 0.643055201)
wait()
   end,
})

local Button = Tab1:CreateButton({
   Name = "Teleport Snow City",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-858.358032, 0.5, 2170.35132, 0.499959469, 0, 0.866048813, 0, 1, 0, -0.866048813, 0, 0.499959469)
wait()
   end,
})


local Button = Tab1:CreateButton({
   Name = "Teleport Magma City",
   Callback = function()
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-125.325249, 5.84164286, 2539.29321, -0.0924379453, 0.0400919542, 0.994911015, 1.78705086e-05, 0.999189138, -0.0402626954, -0.995718539, -0.00370399281, -0.0923636928)
wait()
   end,
})
end
